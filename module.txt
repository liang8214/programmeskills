一.string 
1.Template:可以将字符串的格式固定下来，重复利用.
实现方式：是首先通过Template初始化一个字符串。这些字符串中包含了一个个key。通过调用substitute或safe_subsititute，将key值与方法中传递过来的参数对应上，从而实现在指定的位置导入字符串。这个方式的一个好处是不用像print ‘%s'之类的方式，各个参数的顺序必须固定，只要key是正确的，值就能正确插入。

>>s=Template(There $a and $b)
>>print s.subtitute(a='apple',b='banana')
There apple and banana
>>print s.safe_substitute(a='apple',b='banbana')
There apple and banbana


safe_substitute则不会报错，而是将$xxx直接输入到结果字符串中，

$xxx需要和其他字符串接触时，可用{}将xxx包裹起来

Template可以被继承,它的子类可以进行一些‘个性化'操作...

通过修改delimiter字段可以将$字符改变为其他字符，如“#”，不过新的标示符需要符合正则表达式的规范。

通过修改idpattern可以修改key的命名规则
from string import Template
class MyTemplate(Template):
  delimiter = "#"
  idpattern = "[a][_a-z0-9]*"
def test():
  s='#aa is not #ab'
  t=MyTemplate(s)
  d={'aa':'apple','ab':'banbana'}
  print t.substitute(d)
if __name__=='__main__':
  test()
