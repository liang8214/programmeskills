mkdir <filename>  创建文件夹
cd     进入文件夹
pwd    查看当前目录
cat <file name> 显示文件内容
rm  <file name> 删除文件

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ ssh-keygen -t rsa -C "youremail@example.com"  创建密钥


git init  把当前目录变成可管理的     仓库（Working Directory）――》   .git 是 repository（版本库），包含 stage 和branch
git add  <filename>  把文件添加到   stage(暂存区）
git commit -m "备注“  把文件从暂存区添加到 branch （分支）

git status  仓库当前状态
git diff  <filename> 查看文件修改情况
git diff HEAD -- readme.txt   命令可以查看工作区和版本库里面最新版本的区别：

git log  查看修改记录  --pretty=oneline
git reset --hard  commit_id  HEAD^   回退操作   HEAD代表指针
git reset HEAD file 可以把暂存区的修改撤销掉（unstage），重新放回工作区：
 

git checkout -- file可以丢弃工作区的修改：总之，就是让这个文件回到最近一次git commit或git add时的状态。
                    (其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。)


删除文件

git rm  <file>    
git commit          :从版本库中删除该文件，那就用命令git rm删掉，并且git commit

---------------------远程库管理----------------------


从远程库clone
git clone  git@github.com:michaelliao/gitskills.git

本地已有库与远程库关联：(添加一个远程库）
 git remote add origin git@github.com:michaelliao/learngit.git

把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
git push -u origin  master  （将master分支上的东西都推送到这个远程库上。-u参数表示第一次需要先建立本地版本库与GitHub远程库的连接，第二次之后就不需要这个参数了。）

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。git push origin master

git remote -v
就可以展现远程库的详细信息。

如果你想推送到下一个库，那么之前的库要记得删，命令是

git remote remove origin

----------------------分支管理-----------------------------
创建分支 dev，
 git branch dev
切换分支：
$ git checkout dev
创建并切换分支
 git checkout -b dev   ：git checkout命令加上-b参数表示创建并切换

合并分支：
git merge命令用于合并指定分支到当前分支。 例:git merge dev

删除分支：
git branch -d dev
用git branch命令查看当前分支：

分支有冲突，用 git status查看，修改后再提交。，合并
git log --graph命令可以看到分支合并图。

----------------分支管理策略------------------------
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
 git merge --no-ff -m "merge with no-ff" dev


分支策略

在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
