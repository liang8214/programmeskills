----------------lunix操作-----------------------
mkdir <filename>  创建文件夹
cd     进入文件夹
pwd    查看当前目录
cat <file name> 显示文件内容
rm  <file name> 删除文件

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ ssh-keygen -t rsa -C "youremail@example.com"  创建密钥
ssh -vT git@github.com

---------------------------------------------------------
git init  把当前目录变成可管理的     仓库（Working Directory）――》   .git 是 repository（版本库），包含 stage 和branch
git add  <filename>  把文件添加到   stage(暂存区）
git commit -m "备注“  把文件从暂存区添加到 branch （分支）

git status  仓库当前状态
git diff  <filename> 查看文件修改情况
git diff HEAD -- readme.txt   命令可以查看工作区和版本库里面最新版本的区别：

git log  查看修改记录  --pretty=oneline
git reset --hard  commit_id  HEAD^   回退操作   HEAD代表指针
git reset HEAD file 可以把暂存区的修改撤销掉（unstage），重新放回工作区：
 

git checkout -- file可以丢弃工作区的修改：总之，就是让这个文件回到最近一次git commit或git add时的状态。
                    (其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。)


删除文件

git rm  <file>    
git commit          :从版本库中删除该文件，那就用命令git rm删掉，并且git commit
---------------------状态提示----------------------
Untracked files:       未提交的文件（未add ）
Changes to be committed:已添加到暂存区，但未提交到分支（所有修改都已add，但未commit）
Changes not staged for commit:只要有未commit的修改，(有修改未add到本次commit里。未包含最近的修改）
1.已add的文件又发生变化，但未提交到分支（已add后又修改，但未commit)
                              ()  
---------------------远程库管理----------------------


从远程库clone
git clone  git@github.com:michaelliao/gitskills.git

(从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库，叫做clone.（clone是将一个库复制到你的本地，是一个本地从无到有的过程
从远程服务器获取到一个branch分支的更新到本地，并更新本地库，叫做pull.（pull是指同步一个在你本地有版本的库内容更新的部分到你的本地库）
git pull相当于是从远程获取最新版本并merge（合并）到本地     git pull = git fetch + git merge，git fetch更安全一些
git clone是远程操作的第一步，通常是从远程主机克隆一个版本库，eg:$ git clone ##   该命令会在本地主机生成一个目录，与远程主机的版本库同名，如果要是制定不同的目录名，可以将目录名作为...http://blog.csdn.net/zhou_xiaomiao/article/details/53185712)

本地已有库与远程库关联：
 git remote add origin git@github.com:michaelliao/learngit.git

把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。￥git push -u origin master

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。git push origin master

----------------------分支管理-----------------------------
创建分支 dev，
 git branch dev
切换分支：
$ git checkout dev
创建并切换分支
 git checkout -b dev   ：git checkout命令加上-b参数表示创建并切换

合并分支：
git merge命令用于合并指定分支到当前分支。 例:git merge dev

删除分支：
git branch -d dev
用git branch命令查看当前分支：

分支有冲突，用 git status查看，修改后再提交。，合并
git log --graph命令可以看到分支合并图。

----------------分支管理策略------------------------
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
 git merge --no-ff -m "merge with no-ff" dev


分支策略

在实际开发中

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
----------bug分支------
git stash  可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：

先用git stash list查看，然后恢复指定的stash，用命令：

$ git stash apply stash@{0}

-----------------Feature（新功能）分支-------------
git branch -D <branchname>   强制删除已commit 但未合并的分支

----------------多人合作---------
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
查看  git remote -v显示更详细的信息

 git push origin master ：推送分支  基本上只推送 master 和dev分支就行了。

抓取分支：小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支

$ git checkout -b dev origin/dev  创建远程origin的dev分支到本地

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

----------标签管理------------------
tag：版本库快照  打在最新提交的commit上的
git tag <name> commit_id    还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -a v0.1 -m "version 0.1 released" 3628164
用命令git show <tagname>可以看到说明文字：

标签打错了，也可以删除：
$ git tag -d v0.1

如果要推送某个标签到远程，使用命令git push origin <tagname>：
一次性推送全部尚未推送到远程的本地标签：$ git push origin --tags

先从本地删除： git tag -d v0.9
然后从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9

---------忽略特殊文件------
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

最后一步就是把.gitignore也提交到Git，就完成了

如果你确实想添加该文件，可以用-f强制添加到Git：
$ git add -f App.class

需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：git check-ignore -v App.class